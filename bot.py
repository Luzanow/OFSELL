
# -*- coding: utf-8 -*-
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
ADMIN_ID = int(os.getenv("OWNER_ID"))

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

user_data = {}

city_options = {
    "–ö–∏—ó–≤ üèôÔ∏è": "–ö–∏—ó–≤ üèôÔ∏è",
    "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥",
    "–•–∞—Ä–∫—ñ–≤ üèôÔ∏è": "–•–∞—Ä–∫—ñ–≤ üèôÔ∏è",
    "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥": "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥"
}

class SellForm(StatesGroup):
    choosing_city = State()
    choosing_category = State()
    choosing_condition = State()

@dp.message_handler(commands="start", state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    user_data[message.from_user.id] = {"items": []}
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìç –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ")
    await message.answer("–í—ñ—Ç–∞—é! –°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:", reply_markup=markup)

@dp.message_handler(Text(equals="üìç –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ"))
async def choose_city(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city in city_options:
        markup.add(city)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –æ–±–ª–∞—Å—Ç—å:", reply_markup=markup)
    await SellForm.choosing_city.set()

@dp.message_handler(state=SellForm.choosing_city)
async def save_city(message: types.Message, state: FSMContext):
    city = message.text
    if city not in city_options:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑ –∫–Ω–æ–ø–æ–∫.")
        return
    user_data[message.from_user.id]["city"] = city

    markup = InlineKeyboardMarkup(row_width=2)
    categories = ["–°—Ç—ñ–ª –õ–æ—Ñ—Ç", "–°—Ç—ñ–ª –î–°–ü", "–û—Ñ—ñ—Å–Ω–µ –∫—Ä—ñ—Å–ª–æ", "–°—Ç—ñ–ª—å—Ü—ñ", "–®–∞—Ñ–∏", "–¢—É–º–±–∏", "–°—Ç–µ–ª–∞–∂—ñ", "–°–µ–π—Ñ–∏", "–Ü–Ω—à–µ"]
    for cat in categories:
        markup.insert(InlineKeyboardButton(cat, callback_data=f"cat_{cat}"))
    markup.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="cat_done"))

    await message.answer("–©–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏? –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=markup)
    await SellForm.choosing_category.set()

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"), state=SellForm.choosing_category)
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "cat_done":
        await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω –º–µ–±–ª—ñ–≤:")
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚úÖ –ì–∞—Ä–Ω–∏–π", "‚ö†Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π", "‚ùå –ü–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É")
        await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω:", reply_markup=markup)
        await SellForm.choosing_condition.set()
    else:
        category = callback.data[4:]
        user_data[callback.from_user.id]["items"].append({"category": category})
        await callback.answer(f"–î–æ–¥–∞–Ω–æ: {category}")

@dp.message_handler(state=SellForm.choosing_condition)
async def select_condition(message: types.Message, state: FSMContext):
    condition = message.text
    if condition not in ["‚úÖ –ì–∞—Ä–Ω–∏–π", "‚ö†Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π", "‚ùå –ü–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É"]:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –∫–Ω–æ–ø–æ–∫.")
        return
    if user_data[message.from_user.id]["items"]:
        user_data[message.from_user.id]["items"][-1]["condition"] = condition
    await message.answer(f"–°—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {condition}")
    await state.finish()

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
