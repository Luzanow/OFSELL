
# -*- coding: utf-8 -*-
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
ADMIN_ID = int(os.getenv("OWNER_ID"))

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
user_data = {}
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìç –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ"))
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø–æ—á–∞—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=markup)

# –ú—ñ—Å—Ç–∞ –∑ –µ–º–æ–¥–∑—ñ
city_options = {
    "–ö–∏—ó–≤ üèôÔ∏è": "–ö–∏—ó–≤ üèôÔ∏è",
    "–•–∞—Ä–∫—ñ–≤ üèôÔ∏è": "–•–∞—Ä–∫—ñ–≤ üèôÔ∏è",
    "–û–¥–µ—Å–∞ üåä": "–û–¥–µ—Å–∞ üåä",
    "–î–Ω—ñ–ø—Ä–æ üåÜ": "–î–Ω—ñ–ø—Ä–æ üåÜ",
    "–õ—å–≤—ñ–≤ üèûÔ∏è": "–õ—å–≤—ñ–≤ üèûÔ∏è"
}

# –°—Ç–∞–Ω –º–µ–±–ª—ñ–≤
conditions = ["‚úÖ –ì–∞—Ä–Ω–∏–π", "‚ö†Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π", "‚ùå –ü–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É"]

# –ö–ª–∞—Å–∏ —Å—Ç–∞–Ω—ñ–≤
class SellForm(StatesGroup):
    choosing_city = State()
    choosing_category = State()
    entering_description = State()
    entering_color = State()
    choosing_condition = State()
    choosing_quantity = State()
    uploading_photos = State()
    entering_price = State()
    confirming = State()


@dp.message_handler(commands="done", state="*")
async def confirm_final(message: types.Message, state: FSMContext):
    data = user_data.get(message.from_user.id)
    if not data or not data.get("items"):
        await message.answer("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞—è–≤–∫–∏.")


    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞
    await category_step(message, state)
    return

    caption = "<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–∫—É–ø –º–µ–±–ª—ñ–≤</b>\n\n"
    all_photos = []
    for i, item in enumerate(data["items"], 1):
        caption += f"<b>{i}. {item['category']}</b>\n"
        caption += f"–û–ø–∏—Å: {item['description']}\n"
        caption += f"–ö–æ–ª—ñ—Ä: {item['color']}\n"
        caption += f"–°—Ç–∞–Ω: {item['condition']}\n"
        caption += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item['quantity']} —à—Ç.\n"
        if item.get("price"):
            caption += f"–¶—ñ–Ω–∞: {item['price']} –≥—Ä–Ω/—à—Ç\n"
        caption += "\n"
        all_photos += item.get("photos", [])

    caption += f"–ú—ñ—Å—Ç–æ: {data['city']}"

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–¥—ñ–∞-–ø–æ—Å—Ç—É –≤ –≥—Ä—É–ø—É
    media_group = []
    for i, photo_id in enumerate(all_photos[:10]):
        media_group.append(InputMediaPhoto(media=photo_id, caption=caption if i == 0 else ""))

    if media_group:
        await bot.send_media_group(chat_id=GROUP_ID, media=media_group)

    # –ö–Ω–æ–ø–∫–∞ –ü—Ä–∏–¥–±–∞—Ç–∏ –ø—ñ–¥ –ø–æ—Å—Ç–æ–º
    button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõí –ü—Ä–∏–¥–±–∞—Ç–∏", url="https://t.me/Luzanow")
    )
    await bot.send_message(chat_id=GROUP_ID, text=caption, reply_markup=button)

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    await bot.send_message(chat_id=ADMIN_ID, text="–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–∫—É–ø –º–µ–±–ª—ñ–≤:")
    await bot.send_message(chat_id=ADMIN_ID, text=caption)

    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞.")
    await state.finish()

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)


@dp.message_handler(state=SellForm.choosing_category)
async def category_step(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]["selected_categories"] = []
    
    categories = [
        "–°—Ç—ñ–ª –õ–æ—Ñ—Ç", "–°—Ç—ñ–ª –î–°–ü", "–û—Ñ—ñ—Å–Ω–µ –∫—Ä—ñ—Å–ª–æ", "–°—Ç—ñ–ª—å—Ü—ñ",
        "–®–∞—Ñ–∏", "–¢—É–º–±–∏", "–°—Ç–µ–ª–∞–∂—ñ", "–°–µ–π—Ñ–∏", "–û—Ñ—ñ—Å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", "–Ü–Ω—à—ñ –º–µ–±–ª—ñ"
    ]

    markup = InlineKeyboardMarkup(row_width=2)
    for cat in categories:
        markup.insert(InlineKeyboardButton(f"‚óªÔ∏è {cat}", callback_data=f"cat_{cat}"))
    markup.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="cat_done"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–µ–±–ª—ñ, —è–∫—ñ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"), state=SellForm.choosing_category)
async def toggle_category(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    category = callback.data[4:]
    selected = user_data[user_id].setdefault("selected_categories", [])

    if category == "done":
        if not selected:
            await callback.answer("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.")
            return
        await callback.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        await SellForm.next()
        return

    if category in selected:
        selected.remove(category)
    else:
        selected.append(category)

    
    categories = [
        "–°—Ç—ñ–ª –õ–æ—Ñ—Ç", "–°—Ç—ñ–ª –î–°–ü", "–û—Ñ—ñ—Å–Ω–µ –∫—Ä—ñ—Å–ª–æ", "–°—Ç—ñ–ª—å—Ü—ñ",
        "–®–∞—Ñ–∏", "–¢—É–º–±–∏", "–°—Ç–µ–ª–∞–∂—ñ", "–°–µ–π—Ñ–∏", "–û—Ñ—ñ—Å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", "–Ü–Ω—à—ñ –º–µ–±–ª—ñ"
    ]

    markup = InlineKeyboardMarkup(row_width=2)
    for cat in categories:
        symbol = "‚òëÔ∏è" if cat in selected else "‚óªÔ∏è"
        markup.insert(InlineKeyboardButton(f"{symbol} {cat}", callback_data=f"cat_{cat}"))
    markup.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="cat_done"))

    await callback.message.edit_reply_markup(reply_markup=markup)
    await callback.answer("–û–Ω–æ–≤–ª–µ–Ω–æ")


# –î–∞–ª—ñ ‚Äî –æ–ø–∏—Å, –∫–æ–ª—ñ—Ä, —Å—Ç–∞–Ω, –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Ñ–æ—Ç–æ, —Ü—ñ–Ω–∞ –ø—ñ—Å–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π

@dp.message_handler(state=SellForm.entering_description)
async def enter_description(message: types.Message, state: FSMContext):
    item = user_data[message.from_user.id].setdefault("current_item", {})
    item["description"] = message.text
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("–ë—ñ–ª–∏–π", "–°—ñ—Ä–∏–π", "–ß–æ—Ä–Ω–∏–π", "–ö–æ—Ä–∏—á–Ω–µ–≤–∏–π", "–Ü–Ω—à–∏–π"))
    await SellForm.entering_color.set()

@dp.message_handler(state=SellForm.entering_color)
async def enter_color(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]["current_item"]["color"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ì–∞—Ä–Ω–∏–π", "‚ö†Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π", "‚ùå –ü–æ—Ç—Ä–µ–±—É—î —Ä–µ–º–æ–Ω—Ç—É")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω –º–µ–±–ª—ñ–≤:", reply_markup=kb)
    await SellForm.choosing_condition.set()

@dp.message_handler(state=SellForm.choosing_condition)
async def enter_condition(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]["current_item"]["condition"] = message.text
    kb = InlineKeyboardMarkup(row_width=3).add(
        InlineKeyboardButton("‚ûñ", callback_data="qty_dec"),
        InlineKeyboardButton("1", callback_data="qty_val"),
        InlineKeyboardButton("‚ûï", callback_data="qty_inc")
    ).add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="qty_next"))
    user_data[message.from_user.id]["current_item"]["quantity"] = 1
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:", reply_markup=kb)
    await SellForm.choosing_quantity.set()


@dp.callback_query_handler(lambda c: c.data in ["qty_dec", "qty_inc", "qty_next"], state=SellForm.choosing_quantity)
async def handle_quantity(callback: types.CallbackQuery, state: FSMContext):
    data = user_data[callback.from_user.id]
    current = data["current_item"]
    qty = current.get("quantity", 1)

    if callback.data == "qty_dec" and qty > 1:
        qty -= 1
    elif callback.data == "qty_inc":
        qty += 1
    elif callback.data == "qty_next":
        await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–¥–æ 10):")
        await SellForm.uploading_photos.set()
        return

    current["quantity"] = qty
    kb = InlineKeyboardMarkup(row_width=3).add(
        InlineKeyboardButton("‚ûñ", callback_data="qty_dec"),
        InlineKeyboardButton(str(qty), callback_data="qty_val"),
        InlineKeyboardButton("‚ûï", callback_data="qty_inc")
    ).add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="qty_next"))
    await callback.message.edit_reply_markup(reply_markup=kb)
    await callback.answer()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=SellForm.uploading_photos)
async def handle_photos(message: types.Message, state: FSMContext):
    item = user_data[message.from_user.id]["current_item"]
    photos = item.setdefault("photos", [])
    if len(photos) >= 10:
        await message.answer("–ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ. –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å:")
        await SellForm.entering_price.set()
        return

    photos.append(message.photo[-1].file_id)
    await message.answer(f"–§–æ—Ç–æ {len(photos)} –∑ 10 –¥–æ–¥–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'.")

@dp.message_handler(lambda m: m.text.lower() == "–≥–æ—Ç–æ–≤–æ", state=SellForm.uploading_photos)
async def done_photos(message: types.Message, state: FSMContext):
    await message.answer("–•–æ—á–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ —Å–≤–æ—é —Ü—ñ–Ω—É –∑–∞ –æ–¥–∏–Ω–∏—Ü—é? –Ø–∫—â–æ –Ω—ñ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"))
    await SellForm.entering_price.set()

@dp.message_handler(state=SellForm.entering_price)
async def handle_price(message: types.Message, state: FSMContext):
    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_data[message.from_user.id]["current_item"]["price"] = message.text
    user_data[message.from_user.id]["items"].append(user_data[message.from_user.id]["current_item"])
    user_data[message.from_user.id]["current_item"] = {}
    await message.answer("‚úÖ –ü–æ–∑–∏—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
    await message.answer("–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞—è–≤–∫—É ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /done")



@dp.message_handler(commands="myitems", state="*")
async def show_items(message: types.Message, state: FSMContext):
    items = user_data.get(message.from_user.id, {}).get("items", [])
    if not items:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π.")
        return

    for i, item in enumerate(items):
        caption = f"<b>{i+1}. {item['category']}</b>\n–û–ø–∏—Å: {item['description']}\n–ö–æ–ª—ñ—Ä: {item['color']}\n–°—Ç–∞–Ω: {item['condition']}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item['quantity']}"
        if item.get("price"):
            caption += f"\n–¶—ñ–Ω–∞: {item['price']} –≥—Ä–Ω/—à—Ç"
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{i}"),
            InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{i}")
        )
        if item.get("photos"):
            await bot.send_photo(chat_id=message.chat.id, photo=item["photos"][0], caption=caption, parse_mode="HTML", reply_markup=markup)
        else:
            await message.answer(caption, parse_mode="HTML", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("delete_"), state="*")
async def delete_item(callback: types.CallbackQuery, state: FSMContext):
    idx = int(callback.data.split("_")[1])
    user_data[callback.from_user.id]["items"].pop(idx)
    await callback.answer("–í–∏–¥–∞–ª–µ–Ω–æ.")
    await callback.message.edit_text("–ü–æ–∑–∏—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ.")

@dp.callback_query_handler(lambda c: c.data.startswith("edit_"), state="*")
async def edit_item(callback: types.CallbackQuery, state: FSMContext):
    idx = int(callback.data.split("_")[1])
    item = user_data[callback.from_user.id]["items"][idx]
    user_data[callback.from_user.id]["current_item"] = item
    user_data[callback.from_user.id]["edit_index"] = idx
    await callback.message.answer("–†–µ–¥–∞–≥—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å:")
    await SellForm.entering_description.set()

@dp.message_handler(state=SellForm.entering_price)
async def handle_price_editable(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        user_data[uid]["current_item"]["price"] = message.text

    index = user_data[uid].get("edit_index")
    if index is not None:
        user_data[uid]["items"][index] = user_data[uid]["current_item"]
        user_data[uid]["edit_index"] = None
        await message.answer("‚úÖ –ü–æ–∑–∏—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        user_data[uid]["items"].append(user_data[uid]["current_item"])
    user_data[uid]["current_item"] = {}
    await message.answer("–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞—è–≤–∫—É ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /done")
if name == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

