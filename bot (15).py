
# -*- coding: utf-8 -*-
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
ADMIN_ID = int(os.getenv("OWNER_ID"))

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

user_data = {}

city_options = {
    "–ö–∏—ó–≤ üèôÔ∏è": "–ö–∏—ó–≤ üèôÔ∏è",
    "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥": "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥",
    "–•–∞—Ä–∫—ñ–≤ üèôÔ∏è": "–•–∞—Ä–∫—ñ–≤ üèôÔ∏è",
    "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥": "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥",
    "–û–¥–µ—Å–∞ üåä": "–û–¥–µ—Å–∞ üåä",
    "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥": "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥",
    "–õ—å–≤—ñ–≤ üèûÔ∏è": "–õ—å–≤—ñ–≤ üèûÔ∏è",
    "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥": "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥",
    "–î–Ω—ñ–ø—Ä–æ üåÜ": "–î–Ω—ñ–ø—Ä–æ üåÜ",
    "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥": "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å üå≥"
}

class SellForm(StatesGroup):
    choosing_city = State()
    choosing_category = State()
    entering_description = State()
    entering_color = State()
    choosing_condition = State()
    entering_quantity = State()
    uploading_photos = State()
    entering_price = State()
    confirming = State()

@dp.message_handler(commands="start", state="*")
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    user_data[message.from_user.id] = {"items": [], "current_item": {}}
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìç –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ")
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –∑–∞—è–≤–∫–∏:", reply_markup=markup)

@dp.message_handler(Text(equals="üìç –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ"))
async def choose_city(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city in city_options:
        markup.add(city)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –æ–±–ª–∞—Å—Ç—å:", reply_markup=markup)
    await SellForm.choosing_city.set()

@dp.message_handler(state=SellForm.choosing_city)
async def save_city(message: types.Message, state: FSMContext):
    city = message.text
    if city not in city_options:
        await message.answer("–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∑ –∫–Ω–æ–ø–æ–∫.")
        return
    user_data[message.from_user.id]["city"] = city
    markup = InlineKeyboardMarkup(row_width=2)
    categories = ["–°—Ç—ñ–ª –õ–æ—Ñ—Ç", "–°—Ç—ñ–ª –î–°–ü", "–û—Ñ—ñ—Å–Ω–µ –∫—Ä—ñ—Å–ª–æ", "–°—Ç—ñ–ª—å—Ü—ñ", "–®–∞—Ñ–∏", "–¢—É–º–±–∏", "–°—Ç–µ–ª–∞–∂—ñ", "–°–µ–π—Ñ–∏", "–Ü–Ω—à–µ"]
    for cat in categories:
        markup.insert(InlineKeyboardButton(f"‚¨ú {cat}", callback_data=f"cat_{cat}"))
    markup.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="cat_done"))
    await message.answer("–©–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏? –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=markup)
    user_data[message.from_user.id]["selected_categories"] = []
    await SellForm.choosing_category.set()

# –î—Ä—É–≥–∞ —á–∞—Å—Ç–∏–Ω–∞ –∑ –æ–ø–∏—Å–æ–º, –∫–æ–ª—å–æ—Ä–æ–º, —Å—Ç–∞–Ω–æ–º, –∫—ñ–ª—å–∫—ñ—Å—Ç—é, —Ñ–æ—Ç–æ, —Ü—ñ–Ω–æ—é, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º...

# –ü—ñ—Å–ª—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
@dp.message_handler(commands="done", state="*")
async def confirm_final(message: types.Message, state: FSMContext):
    data = user_data.get(message.from_user.id)
    if not data or not data.get("items"):
        await message.answer("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞—è–≤–∫–∏.")
        return

    caption = "<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–∫—É–ø –º–µ–±–ª—ñ–≤</b>\n\n"
    for i, item in enumerate(data["items"], 1):
        caption += f"<b>{i}. {item['category']}</b>\n"
        caption += f"–û–ø–∏—Å: {item['description']}\n"
        caption += f"–ö–æ–ª—ñ—Ä: {item['color']}\n"
        caption += f"–°—Ç–∞–Ω: {item['condition']}\n"
        caption += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item['quantity']} —à—Ç.\n"
        if item.get("price"):
            caption += f"–¶—ñ–Ω–∞: {item['price']}\n"
        caption += "\n"

    caption += f"–ú—ñ—Å—Ç–æ: {data['city']}"

    media_group = []
    for item in data["items"]:
        for p in item.get("photos", []):
            media_group.append(InputMediaPhoto(media=p))

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—É
    if media_group:
        await bot.send_media_group(chat_id=GROUP_ID, media=media_group)

    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", url=f"https://t.me/{(await bot.get_me()).username}"))
    await bot.send_message(chat_id=GROUP_ID, text=caption, reply_markup=keyboard)

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    await bot.send_message(chat_id=ADMIN_ID, text="–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–∫—É–ø –æ—Ç—Ä–∏–º–∞–Ω–∞:")
    await bot.send_message(chat_id=ADMIN_ID, text=caption)

    await message.answer("‚úÖ –ó–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    await state.finish()

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
