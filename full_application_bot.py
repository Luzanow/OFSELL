
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text

API_TOKEN = "YOUR_BOT_TOKEN"
GROUP_ID = -1001234567890  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ ID —Ç–≤–æ—î—ó –≥—Ä—É–ø–∏
ADMIN_ID = 123456789  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Ç–≤—ñ–π Telegram ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

user_data = {}

class SellForm(StatesGroup):
    choosing_city = State()
    choosing_category = State()
    entering_description = State()
    entering_color = State()
    entering_quantity = State()
    uploading_photos = State()
    entering_name = State()
    entering_phone = State()
    confirm_submission = State()

@dp.message_handler(commands='start', state='*')
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    user_data[message.from_user.id] = {"items": []}
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üìç –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ")
    await message.answer("–í—ñ—Ç–∞—é! –°–ø–µ—Ä—à—É –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:", reply_markup=markup)

@dp.message_handler(Text(equals="üìç –í–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ"))
async def choose_city(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ö–∏—ó–≤", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    markup.add("–•–∞—Ä–∫—ñ–≤", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    markup.add("–õ—å–≤—ñ–≤", "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    markup.add("–û–¥–µ—Å–∞", "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    markup.add("–î–Ω—ñ–ø—Ä–æ", "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –æ–±–ª–∞—Å—Ç—å:", reply_markup=markup)
    await SellForm.choosing_city.set()

@dp.message_handler(state=SellForm.choosing_city)
async def save_city(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]["city"] = message.text
    markup = InlineKeyboardMarkup(row_width=2)
    for cat in ["–°—Ç—ñ–ª", "–°—Ç—ñ–ª–µ—Ü—å", "–®–∞—Ñ–∞", "–¢—É–º–±–∞", "–Ü–Ω—à–µ"]:
        markup.insert(InlineKeyboardButton(cat, callback_data=f"cat_{cat}"))
    markup.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä", callback_data="cat_done"))
    await message.answer("–©–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏? –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=markup)
    await SellForm.choosing_category.set()

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"), state=SellForm.choosing_category)
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "cat_done":
        await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–µ—Ä—à–æ—ó –ø–æ–∑–∏—Ü—ñ—ó:")
        await SellForm.entering_description.set()
    else:
        cat = callback.data[4:]
        user_data[callback.from_user.id]["items"].append({
            "category": cat,
            "description": "",
            "color": "",
            "quantity": 1,
            "photos": []
        })
        await callback.answer(f"–î–æ–¥–∞–Ω–æ: {cat}")

@dp.message_handler(state=SellForm.entering_description)
async def enter_description(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]["items"][-1]["description"] = message.text
    markup = InlineKeyboardMarkup(row_width=2)
    for color in ["–ß–µ—Ä–≤–æ–Ω–∏–π", "–°–∏–Ω—ñ–π", "–ó–µ–ª–µ–Ω–∏–π", "–ë—ñ–ª–∏–π", "–ß–æ—Ä–Ω–∏–π", "–Ü–Ω—à–µ"]:
        markup.insert(InlineKeyboardButton(color, callback_data=f"color_{color}"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä:", reply_markup=markup)
    await SellForm.entering_color.set()

@dp.callback_query_handler(lambda c: c.data.startswith("color_"), state=SellForm.entering_color)
async def choose_color(callback: types.CallbackQuery, state: FSMContext):
    color = callback.data[6:]
    user_data[callback.from_user.id]["items"][-1]["color"] = color
    user_data[callback.from_user.id]["items"][-1]["quantity"] = 1
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ûñ", callback_data="qty_minus"),
        InlineKeyboardButton("1", callback_data="qty_val"),
        InlineKeyboardButton("‚ûï", callback_data="qty_plus")
    ).add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="to_photos"))
    await callback.message.answer("–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å:", reply_markup=markup)
    await SellForm.entering_quantity.set()

@dp.callback_query_handler(lambda c: c.data.startswith("qty_"), state=SellForm.entering_quantity)
async def handle_quantity(callback: types.CallbackQuery, state: FSMContext):
    item = user_data[callback.from_user.id]["items"][-1]
    if callback.data == "qty_plus":
        item["quantity"] += 1
    elif callback.data == "qty_minus" and item["quantity"] > 1:
        item["quantity"] -= 1
    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ûñ", callback_data="qty_minus"),
        InlineKeyboardButton(str(item["quantity"]), callback_data="qty_val"),
        InlineKeyboardButton("‚ûï", callback_data="qty_plus")
    ).add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="to_photos"))
    await callback.message.edit_reply_markup(reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == "to_photos", state=SellForm.entering_quantity)
async def to_photos(callback: types.CallbackQuery, state: FSMContext):
    await SellForm.uploading_photos.set()
    markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—ñ", callback_data="to_name"))
    await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚û°Ô∏è –î–∞–ª—ñ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É.", reply_markup=markup)

@dp.message_handler(content_types=["photo"], state=SellForm.uploading_photos)
async def upload_photo(message: types.Message, state: FSMContext):
    photos = user_data[message.from_user.id]["items"][-1]["photos"]
    if len(photos) < 10:
        photos.append(message.photo[-1].file_id)

@dp.callback_query_handler(lambda c: c.data == "to_name", state=SellForm.uploading_photos)
async def to_name(callback: types.CallbackQuery, state: FSMContext):
    await SellForm.entering_name.set()
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º º—è:")

@dp.message_handler(state=SellForm.entering_name)
async def get_name(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]["name"] = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    )
    await SellForm.entering_phone.set()
    await message.answer("–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=markup)

@dp.message_handler(content_types=["contact"], state=SellForm.entering_phone)
async def get_phone(message: types.Message, state: FSMContext):
    user_data[message.from_user.id]["phone"] = message.contact.phone_number
    await finish_application(message)

async def finish_application(message):
    uid = message.from_user.id
    data = user_data[uid]
    caption = "<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–∫—É–ø –º–µ–±–ª—ñ–≤</b>

"
    for i, item in enumerate(data["items"], 1):
        caption += f"<b>{i}. {item['category']}</b>
"
        caption += f"–û–ø–∏—Å: {item['description']}
"
        caption += f"–ö–æ–ª—ñ—Ä: {item['color']}
"
        caption += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item['quantity']} —à—Ç.

"
    caption += f"–ú—ñ—Å—Ç–æ: {data['city']}"

    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", url="https://t.me/Luzanow")
    )

    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –≥—Ä—É–ø—É
    first_photo = None
    for item in data["items"]:
        if item["photos"]:
            first_photo = item["photos"][0]
            break

    if first_photo:
        await bot.send_photo(GROUP_ID, first_photo, caption=caption, reply_markup=markup)
    else:
        await bot.send_message(GROUP_ID, caption, reply_markup=markup)

    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω—É
    details = caption + f"

–Ü–º º—è: {data['name']}
–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
    await bot.send_message(ADMIN_ID, details)
    for item in data["items"]:
        for pid in item["photos"]:
            await bot.send_photo(ADMIN_ID, pid)

